var Observable_1 = require('./Observable');
exports.Observable = Observable_1.default;
// operators
var combineLatest_static_1 = require('./operators/combineLatest-static');
Observable_1.default.combineLatest = combineLatest_static_1.default;
var concat_static_1 = require('./operators/concat-static');
Observable_1.default.concat = concat_static_1.default;
var DeferObservable_1 = require('./observables/DeferObservable');
Observable_1.default.defer = DeferObservable_1.default.create;
var EmptyObservable_1 = require('./observables/EmptyObservable');
Observable_1.default.empty = EmptyObservable_1.default.create;
var ForkJoinObservable_1 = require('./observables/ForkJoinObservable');
Observable_1.default.forkJoin = ForkJoinObservable_1.default.create;
var FromObservable_1 = require('./observables/FromObservable');
Observable_1.default.from = FromObservable_1.default.create;
var ArrayObservable_1 = require('./observables/ArrayObservable');
Observable_1.default.fromArray = ArrayObservable_1.default.create;
var FromEventObservable_1 = require('./observables/FromEventObservable');
Observable_1.default.fromEvent = FromEventObservable_1.default.create;
var FromEventPatternObservable_1 = require('./observables/FromEventPatternObservable');
Observable_1.default.fromEventPattern = FromEventPatternObservable_1.default.create;
var PromiseObservable_1 = require('./observables/PromiseObservable');
Observable_1.default.fromPromise = PromiseObservable_1.default.create;
var IntervalObservable_1 = require('./observables/IntervalObservable');
Observable_1.default.interval = IntervalObservable_1.default.create;
var merge_static_1 = require('./operators/merge-static');
Observable_1.default.merge = merge_static_1.default;
var InfiniteObservable_1 = require('./observables/InfiniteObservable');
Observable_1.default.never = InfiniteObservable_1.default.create;
Observable_1.default.of = ArrayObservable_1.default.of;
var RangeObservable_1 = require('./observables/RangeObservable');
Observable_1.default.range = RangeObservable_1.default.create;
var ErrorObservable_1 = require('./observables/ErrorObservable');
Observable_1.default.throw = ErrorObservable_1.default.create;
var TimerObservable_1 = require('./observables/TimerObservable');
Observable_1.default.timer = TimerObservable_1.default.create;
var zip_static_1 = require('./operators/zip-static');
Observable_1.default.zip = zip_static_1.default;
// Operators
var observableProto = Observable_1.default.prototype;
var buffer_1 = require('./operators/buffer');
observableProto.buffer = buffer_1.default;
var bufferCount_1 = require('./operators/bufferCount');
observableProto.bufferCount = bufferCount_1.default;
var bufferTime_1 = require('./operators/bufferTime');
observableProto.bufferTime = bufferTime_1.default;
var bufferToggle_1 = require('./operators/bufferToggle');
observableProto.bufferToggle = bufferToggle_1.default;
var bufferWhen_1 = require('./operators/bufferWhen');
observableProto.bufferWhen = bufferWhen_1.default;
var catch_1 = require('./operators/catch');
observableProto.catch = catch_1.default;
var combineAll_1 = require('./operators/combineAll');
observableProto.combineAll = combineAll_1.default;
var combineLatest_1 = require('./operators/combineLatest');
observableProto.combineLatest = combineLatest_1.default;
var concat_1 = require('./operators/concat');
observableProto.concat = concat_1.default;
var concatAll_1 = require('./operators/concatAll');
observableProto.concatAll = concatAll_1.default;
var concatMap_1 = require('./operators/concatMap');
observableProto.concatMap = concatMap_1.default;
var concatMapTo_1 = require('./operators/concatMapTo');
observableProto.concatMapTo = concatMapTo_1.default;
var count_1 = require('./operators/count');
observableProto.count = count_1.default;
var dematerialize_1 = require('./operators/dematerialize');
observableProto.dematerialize = dematerialize_1.default;
var debounce_1 = require('./operators/debounce');
observableProto.debounce = debounce_1.default;
var debounceTime_1 = require('./operators/debounceTime');
observableProto.debounceTime = debounceTime_1.default;
var defaultIfEmpty_1 = require('./operators/defaultIfEmpty');
observableProto.defaultIfEmpty = defaultIfEmpty_1.default;
var delay_1 = require('./operators/delay');
observableProto.delay = delay_1.default;
var distinctUntilChanged_1 = require('./operators/distinctUntilChanged');
observableProto.distinctUntilChanged = distinctUntilChanged_1.default;
var distinctUntilKeyChanged_1 = require('./operators/extended/distinctUntilKeyChanged');
observableProto.distinctUntilKeyChanged = distinctUntilKeyChanged_1.default;
var do_1 = require('./operators/do');
observableProto.do = do_1.default;
var elementAt_1 = require('./operators/extended/elementAt');
observableProto.elementAt = elementAt_1.default;
var expand_1 = require('./operators/expand');
observableProto.expand = expand_1.default;
var filter_1 = require('./operators/filter');
observableProto.filter = filter_1.default;
var find_1 = require('./operators/extended/find');
observableProto.find = find_1.default;
var findIndex_1 = require('./operators/extended/findIndex');
observableProto.findIndex = findIndex_1.default;
var finally_1 = require('./operators/finally');
observableProto.finally = finally_1.default;
var first_1 = require('./operators/first');
observableProto.first = first_1.default;
var groupBy_1 = require('./operators/groupBy');
observableProto.groupBy = groupBy_1.groupBy;
var ignoreElements_1 = require('./operators/ignoreElements');
observableProto.ignoreElements = ignoreElements_1.default;
var isEmpty_1 = require('./operators/extended/isEmpty');
observableProto.isEmpty = isEmpty_1.default;
var every_1 = require('./operators/every');
observableProto.every = every_1.default;
var last_1 = require('./operators/last');
observableProto.last = last_1.default;
var map_1 = require('./operators/map');
observableProto.map = map_1.default;
var mapTo_1 = require('./operators/mapTo');
observableProto.mapTo = mapTo_1.default;
var materialize_1 = require('./operators/materialize');
observableProto.materialize = materialize_1.default;
var merge_1 = require('./operators/merge');
observableProto.merge = merge_1.default;
var mergeAll_1 = require('./operators/mergeAll');
observableProto.mergeAll = mergeAll_1.default;
var mergeMap_1 = require('./operators/mergeMap');
observableProto.mergeMap = mergeMap_1.default;
observableProto.flatMap = mergeMap_1.default;
var mergeMapTo_1 = require('./operators/mergeMapTo');
observableProto.mergeMapTo = mergeMapTo_1.default;
observableProto.flatMapTo = mergeMapTo_1.default;
var multicast_1 = require('./operators/multicast');
observableProto.multicast = multicast_1.default;
var observeOn_1 = require('./operators/observeOn');
observableProto.observeOn = observeOn_1.default;
var partition_1 = require('./operators/partition');
observableProto.partition = partition_1.default;
var publish_1 = require('./operators/publish');
observableProto.publish = publish_1.default;
var publishBehavior_1 = require('./operators/publishBehavior');
observableProto.publishBehavior = publishBehavior_1.default;
var publishReplay_1 = require('./operators/publishReplay');
observableProto.publishReplay = publishReplay_1.default;
var reduce_1 = require('./operators/reduce');
observableProto.reduce = reduce_1.default;
var repeat_1 = require('./operators/repeat');
observableProto.repeat = repeat_1.default;
var retry_1 = require('./operators/retry');
observableProto.retry = retry_1.default;
var retryWhen_1 = require('./operators/retryWhen');
observableProto.retryWhen = retryWhen_1.default;
var sample_1 = require('./operators/sample');
observableProto.sample = sample_1.default;
var sampleTime_1 = require('./operators/sampleTime');
observableProto.sampleTime = sampleTime_1.default;
var scan_1 = require('./operators/scan');
observableProto.scan = scan_1.default;
var share_1 = require('./operators/share');
observableProto.share = share_1.default;
var shareReplay_1 = require('./operators/shareReplay');
observableProto.shareReplay = shareReplay_1.default;
var single_1 = require('./operators/single');
observableProto.single = single_1.default;
var skip_1 = require('./operators/skip');
observableProto.skip = skip_1.default;
var skipUntil_1 = require('./operators/skipUntil');
observableProto.skipUntil = skipUntil_1.default;
var startWith_1 = require('./operators/startWith');
observableProto.startWith = startWith_1.default;
var subscribeOn_1 = require('./operators/subscribeOn');
observableProto.subscribeOn = subscribeOn_1.default;
var switch_1 = require('./operators/switch');
observableProto.switch = switch_1.default;
var switchMap_1 = require('./operators/switchMap');
observableProto.switchMap = switchMap_1.default;
var switchMapTo_1 = require('./operators/switchMapTo');
observableProto.switchMapTo = switchMapTo_1.default;
var take_1 = require('./operators/take');
observableProto.take = take_1.default;
var takeUntil_1 = require('./operators/takeUntil');
observableProto.takeUntil = takeUntil_1.default;
var throttle_1 = require('./operators/throttle');
observableProto.throttle = throttle_1.default;
var timeInterval_1 = require('./operators/extended/timeInterval');
observableProto.timeInterval = timeInterval_1.default;
var timeout_1 = require('./operators/timeout');
observableProto.timeout = timeout_1.default;
var timeoutWith_1 = require('./operators/timeoutWith');
observableProto.timeoutWith = timeoutWith_1.default;
var toArray_1 = require('./operators/toArray');
observableProto.toArray = toArray_1.default;
var toPromise_1 = require('./operators/toPromise');
observableProto.toPromise = toPromise_1.default;
var window_1 = require('./operators/window');
observableProto.window = window_1.default;
var windowCount_1 = require('./operators/windowCount');
observableProto.windowCount = windowCount_1.default;
var windowTime_1 = require('./operators/windowTime');
observableProto.windowTime = windowTime_1.default;
var windowToggle_1 = require('./operators/windowToggle');
observableProto.windowToggle = windowToggle_1.default;
var windowWhen_1 = require('./operators/windowWhen');
observableProto.windowWhen = windowWhen_1.default;
var withLatestFrom_1 = require('./operators/withLatestFrom');
observableProto.withLatestFrom = withLatestFrom_1.default;
var zip_1 = require('./operators/zip');
observableProto.zip = zip_1.default;
var zipAll_1 = require('./operators/zipAll');
observableProto.zipAll = zipAll_1.default;
var Subject_1 = require('./Subject');
exports.Subject = Subject_1.default;
var Subscription_1 = require('./Subscription');
exports.Subscription = Subscription_1.default;
var Subscriber_1 = require('./Subscriber');
exports.Subscriber = Subscriber_1.default;
var ReplaySubject_1 = require('./subjects/ReplaySubject');
exports.ReplaySubject = ReplaySubject_1.default;
var BehaviorSubject_1 = require('./subjects/BehaviorSubject');
exports.BehaviorSubject = BehaviorSubject_1.default;
var ConnectableObservable_1 = require('./observables/ConnectableObservable');
exports.ConnectableObservable = ConnectableObservable_1.default;
var Notification_1 = require('./Notification');
exports.Notification = Notification_1.default;
var EmptyError_1 = require('./util/EmptyError');
exports.EmptyError = EmptyError_1.default;
var ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.default;
var nextTick_1 = require('./schedulers/nextTick');
var immediate_1 = require('./schedulers/immediate');
var timeInterval_2 = require('./operators/extended/timeInterval');
exports.TimeInterval = timeInterval_2.TimeInterval;
var TestScheduler_1 = require('./testing/TestScheduler');
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = require('./schedulers/VirtualTimeScheduler');
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.default;
var Scheduler = {
    nextTick: nextTick_1.default,
    immediate: immediate_1.default
};
exports.Scheduler = Scheduler;
//# sourceMappingURL=Rx.KitchenSink.js.map